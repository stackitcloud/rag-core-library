# coding: utf-8

"""
    STACKIT RAG

    The perfect rag solution.

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool
from typing import Any, ClassVar, Dict, List, Optional
from admin_api_lib.rag_backend_client.openapi_client.models.information_piece import InformationPiece
from typing import Optional, Set
from typing_extensions import Self


class UploadRequest(BaseModel):
    """
    The upload request of the information pieces.
    """  # noqa: E501

    information_pieces: List[InformationPiece] = Field(description="A list of information_pieces.")
    use_latest_collection: Optional[StrictBool] = Field(
        default=None,
        description="Determines if the latest collection is used, or the collection that has the descired alias assigned.",
    )
    __properties: ClassVar[List[str]] = ["information_pieces", "use_latest_collection"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return self.model_dump_json(by_alias=True, exclude_unset=True)

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of UploadRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in information_pieces (list)
        _items = []
        if self.information_pieces:
            for _item_information_pieces in self.information_pieces:
                if _item_information_pieces:
                    _items.append(_item_information_pieces.to_dict())
            _dict["information_pieces"] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of UploadRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "information_pieces": [InformationPiece.from_dict(_item) for _item in obj["information_pieces"]]
                if obj.get("information_pieces") is not None
                else None,
                "use_latest_collection": obj.get("use_latest_collection"),
            }
        )
        return _obj
