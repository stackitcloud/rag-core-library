openapi: 3.1.0
info:
  description: The API is used for the communication between the         admin frontend
    and the admin backend in the rag project.
  title: admin-api-lib
  version: 1.0.0
servers:
- url: /api
paths:
  /delete_document/{identification}:
    delete:
      description: |-
        Asynchronously deletes a document based on the provided identification.

        Parameters
        ----------
        identification : str
            The unique identifier of the document to be deleted.

        Returns
        -------
        None
      operationId: delete_document
      parameters:
      - explode: false
        in: path
        name: identification
        required: true
        schema:
          description: ""
          title: Identification
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema: {}
          description: Deleted
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
        "500":
          description: Internal server error
      summary: Delete Document
      tags:
      - admin
  /document_reference/{identification}:
    get:
      description: |-
        Asynchronously retrieve a document reference by its identification.

        Parameters
        ----------
        identification : str
            The unique identifier for the document reference.

        Returns
        -------
        Response
            The response object containing the document reference details.
      operationId: document_reference
      parameters:
      - description: Identifier of the document.
        explode: false
        in: path
        name: identification
        required: true
        schema:
          description: Identifier of the document.
          title: Identification
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                format: binary
                title: Response 200 Document Reference Document Reference  Identification  Get
                type: string
          description: Returns the pdf in binary form.
        "400":
          content:
            application/json:
              schema:
                title: Response 400 Document Reference Document Reference  Identification  Get
                type: string
          description: Bad request
        "404":
          content:
            application/json:
              schema:
                title: Response 404 Document Reference Document Reference  Identification  Get
                type: string
          description: Document not found.
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
        "500":
          content:
            application/json:
              schema:
                title: Response 500 Document Reference Document Reference  Identification  Get
                type: string
          description: Internal server error
      summary: Document Reference Id Get
      tags:
      - admin
  /all_documents_status:
    get:
      description: |-
        Asynchronously retrieves the status of all documents.

        Returns
        -------
        list[DocumentStatus]
            A list containing the status of all documents.
      operationId: get_all_documents_status
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/DocumentStatus'
                type: array
          description: List of document links
        "500":
          description: Internal server error
      summary: Get All Documents Status
      tags:
      - admin
  /upload_file:
    post:
      description: Uploads user selected sources.
      operationId: upload_file
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Body_upload_file_upload_file_post'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema: {}
          description: ok
        "400":
          description: Bad request
        "422":
          description: Unprocessable Content
        "500":
          description: Internal server error
      summary: Upload File
      tags:
      - admin
  /upload_source:
    post:
      description: Uploads user selected sources.
      operationId: upload_source
      parameters:
      - explode: true
        in: query
        name: type
        required: false
        schema:
          description: ""
          title: Type
          type: string
        style: form
      - explode: true
        in: query
        name: name
        required: false
        schema:
          description: ""
          title: Name
          type: string
        style: form
      requestBody:
        content:
          application/json:
            schema:
              description: ""
              items:
                $ref: '#/components/schemas/KeyValuePair'
              type: array
      responses:
        "200":
          content:
            application/json:
              schema: {}
          description: ok
        "400":
          description: Bad request
        "422":
          description: Unprocessable Content
        "500":
          description: Internal server error
      summary: Upload Source
      tags:
      - admin
components:
  schemas:
    Body_upload_file_upload_file_post:
      properties:
        file:
          format: binary
          title: File
          type: string
      required:
      - file
      title: Body_upload_file_upload_file_post
    DocumentStatus:
      description: DocumentStatus
      example:
        name: name
        status: UPLOADING
      properties:
        name:
          title: Name
          type: string
        status:
          $ref: '#/components/schemas/Status'
      required:
      - name
      - status
      title: DocumentStatus
    HTTPValidationError:
      description: HTTPValidationError
      example:
        detail:
        - msg: msg
          loc:
          - anyof_schema_1_validator: anyof_schema_1_validator
            actual_instance: ""
            any_of_schemas:
            - any_of_schemas
            - any_of_schemas
            anyof_schema_2_validator: 0
          - anyof_schema_1_validator: anyof_schema_1_validator
            actual_instance: ""
            any_of_schemas:
            - any_of_schemas
            - any_of_schemas
            anyof_schema_2_validator: 0
          type: type
        - msg: msg
          loc:
          - anyof_schema_1_validator: anyof_schema_1_validator
            actual_instance: ""
            any_of_schemas:
            - any_of_schemas
            - any_of_schemas
            anyof_schema_2_validator: 0
          - anyof_schema_1_validator: anyof_schema_1_validator
            actual_instance: ""
            any_of_schemas:
            - any_of_schemas
            - any_of_schemas
            anyof_schema_2_validator: 0
          type: type
      properties:
        detail:
          items:
            $ref: '#/components/schemas/ValidationError'
          nullable: true
          title: detail
          type: array
      title: HTTPValidationError
    KeyValuePair:
      description: KeyValuePair
      example:
        value: value
        key: key
      properties:
        key:
          title: Key
          type: string
        value:
          title: Value
          type: string
      required:
      - key
      - value
      title: KeyValuePair
    Status:
      description: allowed enum values
      enum:
      - UPLOADING
      - PROCESSING
      - READY
      - ERROR
      title: Status
      type: string
    ValidationError:
      description: ValidationError
      example:
        msg: msg
        loc:
        - anyof_schema_1_validator: anyof_schema_1_validator
          actual_instance: ""
          any_of_schemas:
          - any_of_schemas
          - any_of_schemas
          anyof_schema_2_validator: 0
        - anyof_schema_1_validator: anyof_schema_1_validator
          actual_instance: ""
          any_of_schemas:
          - any_of_schemas
          - any_of_schemas
          anyof_schema_2_validator: 0
        type: type
      properties:
        loc:
          items:
            $ref: '#/components/schemas/ValidationErrorLocInner'
          title: loc
          type: array
        msg:
          title: Msg
          type: string
        type:
          title: Type
          type: string
      required:
      - loc
      - msg
      - type
      title: ValidationError
    ValidationErrorLocInner:
      description: ValidationErrorLocInner
      example:
        anyof_schema_1_validator: anyof_schema_1_validator
        actual_instance: ""
        any_of_schemas:
        - any_of_schemas
        - any_of_schemas
        anyof_schema_2_validator: 0
      properties:
        anyof_schema_1_validator:
          nullable: true
          title: anyof_schema_1_validator
          type: string
        anyof_schema_2_validator:
          nullable: true
          title: anyof_schema_2_validator
          type: integer
        actual_instance:
          title: actual_instance
        any_of_schemas:
          items:
            type: string
          title: any_of_schemas
          type: array
      title: ValidationErrorLocInner
